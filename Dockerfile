# We build in two stages. First installs all dependencies needed
# to compile and run the binary. Second has only dependencies needed
# to run the binary.
FROM debian:11-slim as builder

# build-essential: compilers to build from source
# gcc-multilib: to run the 32-bit extract75 binary
# python3 and python3-pip: to rewrite our executable errno (see below)
# libc6-dbg: used for Mayhem advanced triage
# vim and gdb: debugging
# curl: to install gdb extension gef (https://hugsy.github.io/gef/install/)
# procps: installs ps for gef 
# file: installs file for gef 
RUN apt-get update && apt-get install -y build-essential libc6-dbg python3 python3-pip libc6-i386 vim gdb curl file procps gcc-multilib nano

# Install gef, the gdb extension that makes hacking easier.
RUN bash -c "$(curl -fsSL https://gef.blah.cat/sh)"

# Make sure we have the right locale for gef
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

# Copy in the original files
WORKDIR /originals
COPY originals .

# Let's hack up some binaries. 
# glibc dropped support for LinuxThreads in glibc-2.4 (like... 20 years ago);
# and pthreads vs LinuxThreads changes how thread-locals like errno work. 
# ancient programs that want to interact with "old errno" are not binary 
# compatible with new glibcs.
WORKDIR /binaries
RUN tar xf /originals/extract_redhat_linux.tar
COPY scripts/rewrite_errno.py .

# We use lief to rewrite the binary. In particular, rewrite `errno` to 
# point to `stdin`.  This would break any program that actually uses 
# stdin, but seems to work here. 
RUN pip3 install lief
RUN ./rewrite_errno.py
RUN chmod 755 extract75-hacked

# Let's build from source!
WORKDIR /src
RUN tar xf /originals/extract_unix_source.tar

# The code is super-old and makes an assumption on errno that
# has not been true since like glibc-2.4
# The easy fix is to add the proper include. 
RUN sed -i '1s/^/#include <errno.h>\n/' j_io.c
RUN sed -i '1s/^/#include <errno.h>\n/' j_string.c


# Clear out the CFLAGS definition in the makefile so it doesn't
# override our settings when we call 'make'.
RUN sed -i 's/CFLAGS= -DUSE_MD5 -g//' makefile

# The included makefile doesn't actually use CFLAGS so we'll fix that.
RUN sed -i 's/ -g -o / -g $(CFLAGS) -o /' makefile

# Make sure we build it like it was originally built. That is,
# without any defenses.
RUN CFLAGS="-DUSE_MD5 -g -m32 -no-pie -Wa,--execstack -fno-stack-protector" make

# extract75 requires DFFPATH be set. We're given all files, though :)
ENV DFFPATH "/src/"

# Copy in our one example seed file. This will reduce Mayhem analysis time,
# often significantly. 
# (Mayhem uses /testsuite as the default test suite if it exists.)
COPY testsuite /testsuite

# And for students, let's copy in the result of a Mayhem run that 
# triggers the vulnerability. This will be the start of our full
# command injection.
COPY exploit /exploit
